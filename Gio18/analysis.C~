#include <iostream>
#include <fstream>
#include <cstdlib>
#include <stdlib.h>
#include "TH1D.h"
#include "TH2D.h"
#include "TPaveStats.h"
#include "TStyle.h"

void analysis () {

   TFile *cut = new TFile("cuts_file.root");
   
   //TCutG *prova  = (TCutG*)cut->Get("prova");
   TCutG *rumore  = (TCutG*)cut->Get("rumore");

   //const char* fileName = "TOF2_run1_time.asc";
   //const char* fileName = "TOF2_run2_pul.asc";
   //const char* fileName = "TOF2_run3_puls.asc";	
   const char* fileName = "TOF2_tot.asc";
   ifstream inputFile;
   inputFile.open(fileName);
   if ( inputFile.fail() ) {
      //std::cout << "File " << fileName << " does not exist." << std::endl;
      exit(1);
   }
   else std::cout << "File \"" << fileName << "\" correctly opened." << std::endl;

   std::cout << "Cominciamo questa analisi" << std::endl;

   Double_t energy, time;

   TH1D *h_energy = new TH1D("h_energy", "Energy", 2087., 0., 4090.);
   TH2D *h_energy_time = new TH2D("h_energy_time", "Energy vs Time", 2048., 0., 4096., 2048., 0., 4096.);

   while ( !inputFile.eof() ) {
         inputFile >> energy;
         h_energy->Fill(energy);

   }

   inputFile.clear();
   inputFile.seekg(0);

   while ( !inputFile.eof() ) {
         inputFile >> energy;
         inputFile >> time;
         //h_energy_time->Fill(energy, time);
	 if ( rumore->IsInside(energy, time) ) 
            h_energy_time->Fill(energy, time);

   }

   gStyle->SetOptStat("e");
 
   h_energy->GetXaxis()->SetTitle("Channel");
   h_energy->GetYaxis()->SetTitle("Count");
   h_energy->Draw();

   TCanvas *c2 = new TCanvas("c2", "c2");
   h_energy_time->GetXaxis()->SetTitle("T [ch]");
   h_energy_time->GetXaxis()->SetTitleSize(0.05);
   h_energy_time->GetXaxis()->SetTitleOffset(0.92);
   h_energy_time->GetYaxis()->SetTitle("E [ch]");
   h_energy_time->GetYaxis()->SetTitleSize(0.05);
   h_energy_time->GetYaxis()->SetTitleOffset(0.92);
   h_energy_time->Draw("colz");

   TH1D *h_ener = h_energy_time->ProjectionY();

   TCanvas *c3 = new TCanvas("c3", "c3");
   c3->SetGrid();
   h_ener->SetTitle("Energy");
   h_ener->GetYaxis()->SetTitle("Counts");
   //h_ener->SetLineColor(kBlue);
   h_ener->Draw();

   /*  *****  Questa parte serve per fittare il picco con due gaussiane unite ******   */
   
   TF1 *gaus1 = new TF1("gaus1", "gaus", 2900., 2999.);
   gaus1->SetParLimits(1, 2900., 2990.);
   TF1 *gaus2 = new TF1("gaus2", "gaus", 2988., 3050.);

   TF1 *total = new TF1("total", "gaus(0) + gaus(3)", 2850., 3060.);
   gaus1->SetLineColor(kBlue + 2);
   gaus2->SetLineColor(kGreen);
   Double_t par[6];

   h_ener->Fit(gaus1,"R");
   h_ener->Fit(gaus2,"R");

   gaus1->GetParameters(&par[0]);
   gaus2->GetParameters(&par[3]);
 
   total->SetParameters(par);

   h_ener->Fit(total,"R");
   //gPad->Update();

   //c3->Update();
   gStyle->SetOptFit(1111);  // Questa opzione stampa (in ordine) prob, chi-quadro, i valori dei parametri e i loro errori
   /*
   TPaveStats *stat_total = (TPaveStats*) h_ener->GetListOfFunctions()->FindObject("stats");
   if ( stat_total ) {
      std::cout << "Ciao" << std::endl;
      //stat_total->SetTextColor(kRed);
      //stat_total->Draw();
   }
   //gStyle->SetOptFit(1);
   */

   //TPaveText *stats = (TPaveText*)gPad->GetPrimitive("stats");
   //stats->SetName("Mystats");
   TPaveStats *stats = (TPaveStats*) h_ener->GetListOfFunctions()->FindObject("stats");
   //h_ener->SetStats(0);
   //stats->AddText("my text line");
   //stats->SetTextColor(kBlue);
   stats->SetX1NDC(.2);
   stats->SetX2NDC(.4);
   stats->SetY1NDC(.7);
   stats->SetY2NDC(.9);
   stats->SetTextColor(4);
   gPad->Modified();
   //gPad->Modified();
   //gPad->Update();

   TLegend *legend = new TLegend( 0.6, 0.65, 0.35, 0.85 );
   legend->AddEntry( h_ener, "Dati sperimentali", "" );
   legend->AddEntry( total, "Fit con funzione a due gaussiane", "" );
   //legend->Draw();  

   TH1D *h_time = h_energy_time->ProjectionX();
   TCanvas *c4 = new TCanvas("c4", "c4");
   h_time->SetTitle("ToF");
   h_time->GetYaxis()->SetTitle("Counts");
   h_time->Draw();

}
