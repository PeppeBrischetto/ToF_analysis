#include <iostream>
#include <fstream>
#include <cstdlib>
#include <stdlib.h>
#include "TH1D.h"
#include "TH2D.h"
#include "TPaveStats.h"
#include "TStyle.h"

void analysis () {

   TFile *cut = new TFile("cuts_file.root");
   
   //TCutG *prova  = (TCutG*)cut->Get("prova");
   TCutG *rumore  = (TCutG*)cut->Get("rumore");

   //const char* fileName = "TOF2_run1_time.asc";
   //const char* fileName = "TOF2_run2_pul.asc";
   //const char* fileName = "TOF2_run3_puls.asc";	
   const char* fileName = "TOF2_tot.asc";
   ifstream inputFile;
   inputFile.open(fileName);
   if ( inputFile.fail() ) {
      //std::cout << "File " << fileName << " does not exist." << std::endl;
      exit(1);
   }
   else std::cout << "File \"" << fileName << "\" correctly opened." << std::endl;

   std::cout << "Cominciamo questa analisi" << std::endl;

   Double_t energy, time;

   TH1D *h_energy = new TH1D("h_energy", "Energy", 2087., 0., 4090.);
   TH2D *h_energy_time = new TH2D("h_energy_time", "Energy vs Time", 2048., 0., 4096., 2048., 0., 4096.);

   while ( !inputFile.eof() ) {
         inputFile >> energy;
         h_energy->Fill(energy);

   }

   inputFile.clear();
   inputFile.seekg(0);

   while ( !inputFile.eof() ) {
         inputFile >> energy;
         inputFile >> time;
         //h_energy_time->Fill(energy, time);
	 if ( rumore->IsInside(energy, time) ) 
            h_energy_time->Fill(energy, time);

   }

   gStyle->SetOptStat("e");
 
   h_energy->GetXaxis()->SetTitle("Channel");
   h_energy->GetYaxis()->SetTitle("Count");
   h_energy->Draw();

   TCanvas *c2 = new TCanvas("c2", "c2");
   h_energy_time->GetXaxis()->SetTitle("T [ch]");
   h_energy_time->GetXaxis()->SetTitleSize(0.05);
   h_energy_time->GetXaxis()->SetTitleOffset(0.92);
   h_energy_time->GetYaxis()->SetTitle("E [ch]");
   h_energy_time->GetYaxis()->SetTitleSize(0.05);
   h_energy_time->GetYaxis()->SetTitleOffset(0.92);
   h_energy_time->Draw("colz");

   TH1D *h_ener = h_energy_time->ProjectionY();

   TCanvas *c3 = new TCanvas("c3", "c3");
   c3->SetGrid();
   h_ener->SetTitle("Energy");
   h_ener->GetYaxis()->SetTitle("Counts");
   h_ener->SetLineWidth(1);
   //h_ener->SetLineColor(kAzure - 8);
   //h_ener->SetFillColor(kAzure - 8);
   //h_ener->SetFillStyle(3002);
   h_ener->Draw();
 
   TH1D *h_ener_clone1 = (TH1D*)( h_ener->Clone() );
   TH1D *h_ener_clone2 = (TH1D*)( h_ener->Clone() );
   
   h_ener_clone1->SetName("Fit picco alta E");
   h_ener_clone2->SetName("Fit a due gaussiane");

   /*  *****  Questa parte serve per fittare il picco con una funzione a due gaussiane  ******   */
   
   TF1 *gaus1 = new TF1("gaus1", "gaus", 2900., 2999.);
   gaus1->SetParLimits(1, 2900., 2988.);
   TF1 *gaus2 = new TF1("gaus2", "gaus", 2990., 3050.);

   TF1 *total = new TF1("total", "gaus(0) + gaus(3)", 2900., 3060.);
   total->SetParName(0, "Const1");
   total->SetParName(1, "#mu1");
   total->SetParName(2, "#sigma1");
   total->SetParName(3, "Const2");
   total->SetParName(4, "#mu2");
   total->SetParName(5, "#sigma2");

   gaus1->SetLineColor(kBlue + 2);
   gaus2->SetLineColor(kGreen);
   Double_t par[6];

   h_ener->Fit(gaus1,"RL");
   h_ener_clone1->Fit(gaus2,"RL","sames");

   gaus1->GetParameters(&par[0]);
   gaus2->GetParameters(&par[3]);
 
   total->SetParameters(par);

   h_ener_clone2->Fit(total,"RL","sames");

   TF1 *gaus_draw1 = new TF1("gaus_draw1", "gaus", 2900., 3100.);
   gaus_draw1->FixParameter( 0, total->GetParameter(0) );
   gaus_draw1->FixParameter( 1, total->GetParameter(1) );
   gaus_draw1->FixParameter( 2, total->GetParameter(2) );
   gaus_draw1->SetLineColor(kCyan -6);
   gaus_draw1->SetLineStyle(2);
   gaus_draw1->Draw("same");
  
   TF1 *gaus_draw2 = new TF1("gaus_draw2", "gaus", 2900., 3100.);
   gaus_draw2->FixParameter( 0, total->GetParameter(3) );
   gaus_draw2->FixParameter( 1, total->GetParameter(4) );
   gaus_draw2->FixParameter( 2, total->GetParameter(5) );
   gaus_draw2->SetLineColor(kGreen-3);
   gaus_draw2->SetLineStyle(9);
   gaus_draw2->Draw("same");

   gPad->Update();
   gStyle->SetOptFit(1111);  // Questa opzione stampa (in ordine) prob, chi-quadro, i valori dei parametri e i loro errori
   //TPaveStats *stat = (TPaveStats*) h_ener->GetListOfFunctions()->FindObject("stats");
   //TPaveStats *stat1 = (TPaveStats*) h_ener_clone1->GetListOfFunctions()->FindObject("stats");
   TPaveStats *stat2 = (TPaveStats*) h_ener_clone2->GetListOfFunctions()->FindObject("stats");
   //if ( stat && stat1 && stat2 ) {
   if ( stat2 ) {
   //stat->SetTextColor(kBlue + 2);
   //stat1->SetTextColor(kGreen);
   stat2->SetTextColor(kRed);
   //Float_t height1 = stat1->GetY2NDC() - stat1->GetY1NDC();
   //stat1->SetY1NDC(stat->GetY1NDC() - height1);
   //stat1->SetY2NDC(stat->GetY1NDC() );
   //stat1->Draw();
   }

   TLegend *legend = new TLegend( 0.6, 0.65, 0.35, 0.75 );
   legend->AddEntry( h_ener, "Dati sperimentali", "fl" );
   legend->AddEntry( gaus_draw1, "Gaussiana picco bassa energia", "l" );
   legend->AddEntry( gaus_draw2, "Gaussiana picco alta energia", "l" );
   legend->AddEntry( total, "Fit con funzione a due gaussiane", "l" );
   legend->Draw();  

   TH1D *h_time = h_energy_time->ProjectionX();
   TCanvas *c4 = new TCanvas("c4", "c4");
   h_time->SetTitle("ToF");
   h_time->GetYaxis()->SetTitle("Counts");
   h_time->Draw();

}
